apply(plugin: "maven-publish")
apply(plugin: "fabric-loom")
apply(plugin: "io.github.juuxel.loom-quiltflower")
apply(plugin: "net.kyori.blossom")
apply(plugin: "com.replaymod.preprocess")

int mcVersion = 1

preprocess {
    mcVersion = (int) vars.get()["MC"]
    tabIndentation = false
}

repositories {
    maven {
        name("CurseForge Maven")
        url("https://www.cursemaven.com")
    }

    maven {
        name("Nyan Maven")
        url("https://maven.hendrixshen.top")
    }

    mavenCentral()
    mavenLocal()
}

dependencies {
    // Development environment
    minecraft("com.mojang:minecraft:${project.minecraft_version}")
    mappings(loom.officialMojangMappings())

    // Annotation processor
    modCompileOnly("org.projectlombok:lombok:${project.lombok_version}")
    annotationProcessor("org.projectlombok:lombok:${project.lombok_version}")

    // Dependency
    def ENV = System.getenv()
    modImplementation("top.hendrixshen:magiclib-${project.minecraft_version.replace(".", "_")}:${project.magiclib_version}") {
        if (ENV.BUILD_NUMBER) {
            exclude(group: "net.fabricmc.fabric-api", module: "fabric-api")
        }
    }
    modCompileOnly("curse.maven:litematica-308892:${project.litematica_version}")
    modCompileOnly("curse.maven:not-enough-crashes-353890:${project.not_enough_crashes_version}")

    if (mcVersion >= 11600) {
        modCompileOnly("curse.maven:wthit-440979:${project.wthit_version}")
        if (mcVersion >= 11800) {
            modCompileOnly("curse.maven:badpackets-615134:${project.badpackets_version}")
            modCompileOnly("curse.maven:jade-324717:${project.jade_version}")
        }
    } else {
        modCompileOnly("curse.maven:hwyla-253449:${project.hwyla_version}")
    }

    runtimeOnly(project(path: ":fabricWrapper"))
}

loom {
    runConfigs {
        configureEach {
            // Dump modified classes automatically.
            property("mixin.debug.export", "true")
        }

        // We need large window.
        client {
            programArgs([
                    "--width",
                    "1920",
                    "--height",
                    "1080",
            ])
            runDir("run/client")
        }

        server {
            runDir("run/server")
        }
    }

    // Setup client default settings.
    runClient {
        defaultCharacterEncoding("UTF-8")
        // Set client language to zh_cn
        if (!new File("${projectDir}/run/client/options.txt").exists()) {
            new File("${projectDir}/run/client").mkdirs()
            BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter("${projectDir}/run/client/options.txt"))
            bufferedWriter.writeLine("autoJump:false")
            bufferedWriter.writeLine("enableVsync:false")
            bufferedWriter.writeLine("forceUnicodeFont:true")
            bufferedWriter.writeLine("fov:1.0")
            bufferedWriter.writeLine("gamma:16.0")
            bufferedWriter.writeLine("guiScale:3")
            bufferedWriter.writeLine("lang:${Locale.getDefault().toString()}")
            bufferedWriter.writeLine("maxFps:260")
            bufferedWriter.writeLine("renderDistance:10")
            bufferedWriter.writeLine("soundCategory_master:0.0")
            bufferedWriter.close()
        }
    }

    // Setup server default settings.
    runServer {
        defaultCharacterEncoding("UTF-8")
        // Agree eula before server init.
        if (!new File("${projectDir}/run/server/eula.txt").exists()) {
            new File("${projectDir}/run/server").mkdirs()
            BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter("${projectDir}/run/server/eula.txt"))
            bufferedWriter.writeLine("eula=true")
            bufferedWriter.close()
        }
    }
}

remapJar {
    remapperIsolation = true
}


setArchivesBaseName("${project.archives_base_name}-${project.minecraft_version}")
setVersion(project.parent.version)
setGroup(project.maven_group)
if (mcVersion > 11701) {
    setSourceCompatibility(JavaVersion.VERSION_16)
    setTargetCompatibility(JavaVersion.VERSION_16)
} else {
    setSourceCompatibility(JavaVersion.VERSION_1_8)
    setTargetCompatibility(JavaVersion.VERSION_1_8)
}

processResources {
    filesMatching("fabric.mod.json") {
        filter { line ->
            line.trim().startsWith("//") ? "" : line
        }

        expand(["mod_version"         : project.version,
                "mod_id"              : project.mod_id,
                "mod_name"            : project.mod_name,
                "mod_homepage"        : project.mod_homepage,
                "mod_sources"         : project.mod_sources,
                "mod_license"         : project.mod_license,
                "minecraft_dependency": project.minecraft_dependency,
                "minecraft_version_id": project.minecraft_version.replace(".", "_"),
                "minecraft_version"   : project.minecraft_version,
                "magiclib_dependency" : project.magiclib_dependency
        ])
    }
}

blossom {
    replaceToken("@MOD_IDENTIFIER@"            , project.mod_id)
    replaceToken("@MOD_NAME@"                  , project.mod_name)
    replaceToken("@MINECRAFT_VERSION_IDENTIFY@", project.minecraft_version.replace(".", "_"))
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
}

java {
    withSourcesJar()
}

jar {
    from("../../LICENSE")
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId("${project.mod_id}-${project.minecraft_version.replace(".", "_")}")
            from(components.java)
        }
    }

    repositories {
        mavenLocal()
        maven {
            url("$rootDir/publish")
        }
    }
}
